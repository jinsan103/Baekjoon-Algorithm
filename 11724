/*문제
방향 없는 그래프가 주어졌을 때, 연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2) 둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다. (1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다.

출력
첫째 줄에 연결 요소의 개수를 출력한다. */


import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class Main {
	static ArrayList<Integer> list[];
	static boolean check [];
	public static void main(String args[]) throws Exception {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		int start = 1;
		int cnt=0;
		int ans=0;
		list = (ArrayList<Integer>[]) new ArrayList[n+1];
		
		for(int i=1;i<=n;i++) {
			list[i] = new ArrayList<Integer>();
		}
		
		for(int i=0;i<m;i++) {
			int u = sc.nextInt();
			int v = sc.nextInt();
			list[u].add(v);
			list[v].add(u);
		}
		
		for(int i=1;i<=n;i++) {
			Collections.sort(list[i]);
		}
		
		check = new boolean[n+1];
		
		while (cnt != check.length - 1) {
			cnt=0;
			dfs(start);
			for (int i = 1; i < check.length; i++) {
				if (check[i] == true) {
					cnt++;
				}
			}
			
			for(int i=1;i<check.length;i++) {
				if(!check[i]) {
					start = i;
					break;
				}
			}
			ans++;
		}
		
		System.out.println(ans);
	}
	
	public static void dfs(int s) {
		if(check[s]) {
			return;
		}else {
			check[s]=true;
			for(int i=0;i<list[s].size();i++) {
				int m = list[s].get(i);
				if(!check[m]) {
					dfs(m);
				}
			}
		}
		
	}
}
